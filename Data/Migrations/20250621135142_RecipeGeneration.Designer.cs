// <auto-generated />
using System;
using Application.Models.Recipe.Enums;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(MealPlannerDbContext))]
    [Migration("20250621135142_RecipeGeneration")]
    partial class RecipeGeneration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "course", new[] { "appetizer", "beverage", "dessert", "main", "snack" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "difficulty", new[] { "easy", "hard", "medium" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Application.Models.Recipe.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<double?>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("Application.Models.Recipe.Nutrition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<double?>("Calories")
                        .HasColumnType("double precision");

                    b.Property<string>("CaloriesUnit")
                        .HasColumnType("text");

                    b.Property<double?>("Carbohydrates")
                        .HasColumnType("double precision");

                    b.Property<string>("CarbohydratesUnit")
                        .HasColumnType("text");

                    b.Property<double?>("Fat")
                        .HasColumnType("double precision");

                    b.Property<string>("FatUnit")
                        .HasColumnType("text");

                    b.Property<double?>("Fibre")
                        .HasColumnType("double precision");

                    b.Property<string>("FibreUnit")
                        .HasColumnType("text");

                    b.Property<double?>("Protein")
                        .HasColumnType("double precision");

                    b.Property<string>("ProteinUnit")
                        .HasColumnType("text");

                    b.Property<double?>("Salt")
                        .HasColumnType("double precision");

                    b.Property<string>("SaltUnit")
                        .HasColumnType("text");

                    b.Property<double?>("SaturatedFat")
                        .HasColumnType("double precision");

                    b.Property<string>("SaturatedFatUnit")
                        .HasColumnType("text");

                    b.Property<double?>("Sugars")
                        .HasColumnType("double precision");

                    b.Property<string>("SugarsUnit")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Nutrition");
                });

            modelBuilder.Entity("Application.Models.Recipe.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CookingTime")
                        .HasColumnType("integer");

                    b.Property<Course?>("Course")
                        .HasColumnType("course");

                    b.Property<string>("Cuisine")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Difficulty?>("Difficulty")
                        .HasColumnType("difficulty");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.PrimitiveCollection<string[]>("Instructions")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int?>("PreparationTime")
                        .HasColumnType("integer");

                    b.Property<int?>("Servings")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Application.Models.Recipe.Ingredient", b =>
                {
                    b.HasOne("Application.Models.Recipe.Recipe", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Application.Models.Recipe.Nutrition", b =>
                {
                    b.HasOne("Application.Models.Recipe.Recipe", null)
                        .WithOne("Nutrition")
                        .HasForeignKey("Application.Models.Recipe.Nutrition", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Application.Models.Recipe.Recipe", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Nutrition");
                });
#pragma warning restore 612, 618
        }
    }
}
